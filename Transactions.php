<?php
/* 
 * Generated by MegaBuilder v1.0 
 * www.MegaBuilder.com
 */
 
class Transactions extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Transactions_model');
    } 

    /*
     * Listing of transactions
     */
    function index()
    {
        $data['_view'] = 'transactions/index';
        $this->load->view('layouts/main',$data);
    }
/*
     * Listing of transactions
     */
    function index_all()
    {
        $data['_view'] = 'transactions/index_all';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Adding a new transactions ffffff
     */
    function add()
    {   
        $this->load->library('form_validation');

		//
		$this->form_validation->set_rules('user_id','User_id','trim|required|max_length[255]');
$this->form_validation->set_rules('paymet_type','Paymet_type','trim|required|max_length[100]');
$this->form_validation->set_rules('pay_amount','Pay_amount','trim|required');
$this->form_validation->set_rules('pay_date','Pay_date','trim|required');
$this->form_validation->set_rules('pay_mode','Pay_mode','trim|required|max_length[100]');

		$inputDate=$this->input->post('pay_date');
		$timestamp = strtotime($inputDate);
		$outputDate = date('Y-m-d', $timestamp);
		if($this->form_validation->run())     
        {   
            $params = array(
				//
				'user_id' => $this->input->post('user_id'),
'paymet_type' => $this->input->post('paymet_type'),
'pay_amount' => $this->input->post('pay_amount'),
'pay_date' => $outputDate,
'pay_mode' => $this->input->post('pay_mode'),

            );
            $params=$this->security->xss_clean($params);
            if($this->Transactions_model->add_transactions($params)){
				echo "1";
			}else{
				echo "0";
            }
        }
        else
        {       
			if($_POST){
				$errors = explode("\n", trim(validation_errors()));
				$errorArray = array_filter($errors); // Remove any empty elements
				if (!empty($errorArray)) {
					echo '<ol>';
					foreach ($errorArray as $error) {
						$error = str_replace(['<p>', '</p>'], '', $error);
						echo '<li>' . htmlspecialchars($error) . '</li>';
					}
					echo '</ol>';
				}
			}else{
            $data['_view'] = 'transactions/add';
            $this->load->view('layouts/main',$data);
			}
        }
    }  

    /*
     * Editing a transactions
     */
    function edit($id)
    {   
        // check if the transactions exists before trying to edit it
        $data['transactions'] = $this->Transactions_model->get_transactions($id);
        
        if(isset($data['transactions']['id']))
        {
            $this->load->library('form_validation');

			//
			$this->form_validation->set_rules('user_id','User_id','trim|required|max_length[255]');
$this->form_validation->set_rules('paymet_type','Paymet_type','trim|required|max_length[100]');
$this->form_validation->set_rules('pay_amount','Pay_amount','trim|required');
$this->form_validation->set_rules('pay_date','Pay_date','trim|required');
$this->form_validation->set_rules('pay_mode','Pay_mode','trim|required|max_length[100]');

		$inputDate=$this->input->post('pay_date');
		$timestamp = strtotime($inputDate);
		$outputDate = date('Y-m-d', $timestamp);
			if($this->form_validation->run())     
            {   
                $params = array(
					//
					'user_id' => $this->input->post('user_id'),
'paymet_type' => $this->input->post('paymet_type'),
'pay_amount' => $this->input->post('pay_amount'),
'pay_date' => $outputDate,
'pay_mode' => $this->input->post('pay_mode'),

                );
				$params=$this->security->xss_clean($params);
                
			if($this->Transactions_model->update_transactions($id,$params)){
				echo "1";
			}else{
				echo "0";
            }
        }
        else
        {       
			if($_POST){
				$errors = explode("\n", trim(validation_errors()));
				$errorArray = array_filter($errors); // Remove any empty elements
				if (!empty($errorArray)) {
					echo '<ol>';
					foreach ($errorArray as $error) {
						$error = str_replace(['<p>', '</p>'], '', $error);
						echo '<li>' . htmlspecialchars($error) . '</li>';
					}
					echo '</ol>';
				}
			}else{	
                $data['_view'] = 'transactions/edit';
                $this->load->view('layouts/main',$data);
            }
		}
        }
        else
            show_error('The transactions you are trying to edit does not exist.');
    } 

    /*
     * Deleting transactions
     */
    function remove($id)
    {
        $transactions = $this->Transactions_model->get_transactions($id);

        // check if the transactions exists before trying to delete it
        if(isset($transactions['id']))
        {
            $this->Transactions_model->delete_transactions($id);
            redirect('transactions/index');
        }
        else
            show_error('The transactions you are trying to delete does not exist.');
    }
	
	
	public function dataList(){
     
     // POST data
     $postData = $this->input->post();

     // Get data
     $data = $this->Transactions_model->getDataTableList($postData);

     echo json_encode($data);
  }
    
}